/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Carbonizer, CarbonizerInterface } from "../Carbonizer";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_gTokenVaultAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_carbonizedCollection",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "carbonizedCollection",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "gTokenVault",
    outputs: [
      {
        internalType: "contract ImpactVaultInterface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDeposit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getYield",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawls",
    outputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000e3738038062000e37833981810160405281019062000037919062000217565b620000576200004b620000e160201b60201c565b620000e960201b60201c565b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506200025e565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001df82620001b2565b9050919050565b620001f181620001d2565b8114620001fd57600080fd5b50565b6000815190506200021181620001e6565b92915050565b60008060408385031215620002315762000230620001ad565b5b6000620002418582860162000200565b9250506020620002548582860162000200565b9150509250929050565b610bc9806200026e6000396000f3fe60806040526004361061009c5760003560e01c80638da5cb5b116100645780638da5cb5b1461013c578063b1dd03fa14610167578063c399ec8814610192578063d0e30db0146101bd578063f2fde38b146101c7578063f3576220146101f05761009c565b80633ccfd60b146100a15780634e71d92d146100b85780636e5837b6146100cf578063715018a6146100fa5780637c26287114610111575b600080fd5b3480156100ad57600080fd5b506100b661021c565b005b3480156100c457600080fd5b506100cd6102ad565b005b3480156100db57600080fd5b506100e4610331565b6040516100f19190610872565b60405180910390f35b34801561010657600080fd5b5061010f610357565b005b34801561011d57600080fd5b5061012661036b565b60405161013391906108a6565b60405180910390f35b34801561014857600080fd5b5061015161041d565b60405161015e9190610872565b60405180910390f35b34801561017357600080fd5b5061017c610446565b6040516101899190610920565b60405180910390f35b34801561019e57600080fd5b506101a761046c565b6040516101b491906108a6565b60405180910390f35b6101c561051e565b005b3480156101d357600080fd5b506101ee60048036038101906101e9919061096c565b6105ae565b005b3480156101fc57600080fd5b50610205610632565b604051610213929190610999565b60405180910390f35b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166309cae2c830306040518363ffffffff1660e01b81526004016102799291906109c2565b600060405180830381600087803b15801561029357600080fd5b505af11580156102a7573d6000803e3d6000fd5b50505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634e71d92d6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561031757600080fd5b505af115801561032b573d6000803e3d6000fd5b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61035f6106e7565b6103696000610765565b565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166364c33977306040518263ffffffff1660e01b81526004016103c89190610872565b60206040518083038186803b1580156103e057600080fd5b505afa1580156103f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104189190610a17565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104c99190610872565b60206040518083038186803b1580156104e157600080fd5b505afa1580156104f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105199190610a17565b905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632d2da80634306040518363ffffffff1660e01b815260040161057a9190610872565b6000604051808303818588803b15801561059357600080fd5b505af11580156105a7573d6000803e3d6000fd5b5050505050565b6105b66106e7565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610626576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061d90610ac7565b60405180910390fd5b61062f81610765565b50565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637a9262a2306040518263ffffffff1660e01b81526004016106909190610872565b604080518083038186803b1580156106a757600080fd5b505afa1580156106bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106df9190610ae7565b915091509091565b6106ef610829565b73ffffffffffffffffffffffffffffffffffffffff1661070d61041d565b73ffffffffffffffffffffffffffffffffffffffff1614610763576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075a90610b73565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061085c82610831565b9050919050565b61086c81610851565b82525050565b60006020820190506108876000830184610863565b92915050565b6000819050919050565b6108a08161088d565b82525050565b60006020820190506108bb6000830184610897565b92915050565b6000819050919050565b60006108e66108e16108dc84610831565b6108c1565b610831565b9050919050565b60006108f8826108cb565b9050919050565b600061090a826108ed565b9050919050565b61091a816108ff565b82525050565b60006020820190506109356000830184610911565b92915050565b600080fd5b61094981610851565b811461095457600080fd5b50565b60008135905061096681610940565b92915050565b6000602082840312156109825761098161093b565b5b600061099084828501610957565b91505092915050565b60006040820190506109ae6000830185610897565b6109bb6020830184610897565b9392505050565b60006040820190506109d76000830185610863565b6109e46020830184610863565b9392505050565b6109f48161088d565b81146109ff57600080fd5b50565b600081519050610a11816109eb565b92915050565b600060208284031215610a2d57610a2c61093b565b5b6000610a3b84828501610a02565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610ab1602683610a44565b9150610abc82610a55565b604082019050919050565b60006020820190508181036000830152610ae081610aa4565b9050919050565b60008060408385031215610afe57610afd61093b565b5b6000610b0c85828601610a02565b9250506020610b1d85828601610a02565b9150509250929050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610b5d602083610a44565b9150610b6882610b27565b602082019050919050565b60006020820190508181036000830152610b8c81610b50565b905091905056fea2646970667358221220d9386392ae3859541628f7fe68a1ea6cff1448a1d0d6821aab10ac11d5dc0cef64736f6c63430008090033";

export class Carbonizer__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _gTokenVaultAddress: string,
    _carbonizedCollection: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Carbonizer> {
    return super.deploy(
      _gTokenVaultAddress,
      _carbonizedCollection,
      overrides || {}
    ) as Promise<Carbonizer>;
  }
  getDeployTransaction(
    _gTokenVaultAddress: string,
    _carbonizedCollection: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _gTokenVaultAddress,
      _carbonizedCollection,
      overrides || {}
    );
  }
  attach(address: string): Carbonizer {
    return super.attach(address) as Carbonizer;
  }
  connect(signer: Signer): Carbonizer__factory {
    return super.connect(signer) as Carbonizer__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CarbonizerInterface {
    return new utils.Interface(_abi) as CarbonizerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Carbonizer {
    return new Contract(address, _abi, signerOrProvider) as Carbonizer;
  }
}
